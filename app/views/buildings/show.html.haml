%p#notice= notice

.roof_sets
  %p
    %b Roof set:
    = link_to @building.roof_set.name, @building.roof_set
  %p
    %h1{{style: "padding-bottom: 0;"}}
      = @building.name
  / %p
  /   %b Description:
  /   = @building.description

  .building-list
    %p
      = @building.address
      %br
      #{@building.city}, #{@building.state} #{@building.zipcode}
      %br
      #{@building.latitude}° / #{@building.longitude}°
  
    / %p
    /   %b Notes:
    /   = @building.notes
    / %p
    /   %b Excluded?
    /   = @building.exclude
  
    %p
      = link_to 'View on Sunroof', @building.sunroof_url, target: "_blank"
    / %p
    /   = link_to 'Sunroof Ajax URL', @building.sunroof_ajax_url, target: "_blank"

    %p
      %b Roof sq feet:
      = number_with_delimiter( @building.roof_sq_feet )
      
      %br
      %b Potential kW:
      = number_with_delimiter( @building.kW )
      
      %br
      %b Installed kW:
      = number_with_delimiter( @building.installed_kw)
      
      %br
      %b Sunlight hours:
      = number_with_delimiter( @building.sunlight_hours )
      
      %br
      %b kWh/yr:
      = number_with_delimiter( @building.kWh_yr)
      
      %br
      %b Annual potential savings
      = number_to_currency( @building.savings, precision: 0 )
      
      
      / %p
      /   %b Adjusted sq feet:
      /   = number_with_delimiter( @building.adjusted_sq_feet )
      
      
      
      
    / %p
    /   %b Utility:
    /   = @building.utility

    // = link_to 'Edit', edit_building_path(@building)
  
  .map
    #map

:javascript
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: { zoom: 17 }, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers([
      {
        "lat": #{@building.latitude},
        "lng": #{@building.longitude},
        "infowindow": "#{@building.name}"
      }
    ]);
    // handler.bounds.extendWith(markers);
    handler.map.centerOn({lat: #{@building.latitude}, lng: #{@building.longitude}})
    handler.fitMapToBounds();
  });